<?xml version="1.0"?>

<PropertyList>
  <name>force-feedback</name>
  <dialog-name>force-feedback</dialog-name>

  <!-- <padding>20</padding> -->
  <layout>vbox</layout>

  <!-- Dialog header -->
  <group>
    <layout>hbox</layout>
    <empty><stretch>1</stretch></empty>

    <text>
      <label>Force-feedback options</label>
    </text>

    <empty><stretch>1</stretch></empty>

    <!-- Close button -->
    <button>
      <pref-width>16</pref-width>
      <pref-height>16</pref-height>
      <legend></legend>
      <keynum>27</keynum>
      <border>2</border>
      <binding>
        <command>dialog-close</command>
      </binding>
    </button>
  </group>


  <hrule><stretch>1</stretch></hrule>


  <!-- Device list -->
  <group>
    <layout>hbox</layout>

    <empty><stretch>1</stretch></empty>

    <text>
      <label>Device</label>
    </text>

    <combo>
      <name>selected-device</name>
      <!-- <width>400</width> -->
      <property>/sim/gui/dialogs/force-feedback/selected-device</property>
      <halign>fill</halign>
      <stretch>1</stretch>
      <value>Test1</value>
      <value>Test2 with space</value>
      <binding>
        <command>dialog-apply</command>
        <object-name>selected-device</object-name>
      </binding>
      <binding>
        <command>nasal</command>
        <script>changeDevice();</script>
      </binding>
    </combo>

    <empty><stretch>1</stretch></empty>

  </group>


  <!-- Autocenter and gain -->
  <group>
    <layout>hbox</layout>

    <empty><stretch>1</stretch></empty>

    <text>
      <label>Autocenter</label>
      <enable><property>/sim/gui/dialogs/force-feedback/autocenter-enable</property></enable>
    </text>
    <slider>
      <name>autocenter</name>
      <!-- <width>100</width> -->
      <property>/sim/gui/dialogs/force-feedback/autocenter</property>
      <min>0</min>
      <max>1</max>
      <step>0.01</step>
      <binding>
        <command>dialog-apply</command>
        <object-name>autocenter</object-name>
      </binding>
      <binding>
        <command>nasal</command>
        <script>applyChanges();</script>
      </binding>
      <live>true</live>
      <enable><property>/sim/gui/dialogs/force-feedback/autocenter-enable</property></enable>
    </slider>
    <text>
      <label>0.00</label>
      <property>/sim/gui/dialogs/force-feedback/autocenter</property>
      <format>%-0.2f</format>
      <live>true</live>
      <enable><property>/sim/gui/dialogs/force-feedback/autocenter-enable</property></enable>
    </text>

    <empty><stretch>1</stretch></empty>

    <text>
      <label>Gain</label>
      <enable><property>/sim/gui/dialogs/force-feedback/gain-enable</property></enable>
    </text>
    <slider>
      <name>gain</name>
      <!-- <width>100</width> -->
      <property>/sim/gui/dialogs/force-feedback/gain</property>
      <min>0</min>
      <max>1</max>
      <step>0.01</step>
      <binding>
        <command>dialog-apply</command>
        <object-name>gain</object-name>
      </binding>
      <binding>
        <command>nasal</command>
        <script>applyChanges();</script>
      </binding>
      <live>true</live>
      <enable><property>/sim/gui/dialogs/force-feedback/gain-enable</property></enable>
    </slider>
    <text>
      <label>0.00</label>
      <property>/sim/gui/dialogs/force-feedback/gain</property>
      <format>%-0.2f</format>
      <live>true</live>
      <enable><property>/sim/gui/dialogs/force-feedback/gain-enable</property></enable>
    </text>

    <empty><stretch>1</stretch></empty>

  </group>


  <hrule><stretch>1</stretch></hrule>


  <!-- Frame for all force feedback options -->
  <group>
    <layout>hbox</layout>

    <!-- Left side -->
    <group>
      <layout>vbox</layout>

      <!-- Control surface loading -->
      <group>
        <layout>vbox</layout>

        <!-- Name and strength -->
        <group>
          <layout>hbox</layout>
          <text>
            <label>Control surface forces</label>
            <enable><property>/sim/gui/dialogs/force-feedback/control-surface-enable</property></enable>
          </text>
          <hrule><stretch>1</stretch></hrule>
        </group>

        <!-- Mode selection combo -->
        <combo>
          <name>control-surface-mode</name>
          <!-- <width>400</width> -->
          <property>/sim/gui/dialogs/force-feedback/control-surface-mode</property>
          <halign>fill</halign>
          <stretch>1</stretch>
          <value>Normal</value>
          <value>Alternate</value>
          <binding>
            <command>dialog-apply</command>
            <object-name>control-surface-mode</object-name>
          </binding>
          <binding>
            <command>nasal</command>
            <script>applyChanges();</script>
          </binding>
        </combo>


        <!-- Slider -->
        <group>
          <name>control-surface-strength</name>
          <layout>hbox</layout>
          <text><label>Strength</label><enable><property>/sim/gui/dialogs/force-feedback/control-surface-enable</property></enable></text>
          <slider>
            <name>control-surface-strength</name>
            <!-- <width>100</width> -->
            <property>/sim/gui/dialogs/force-feedback/control-surface-strength</property>
            <min>0</min>
            <max>5</max>
            <step>0.01</step>
            <binding>
              <command>dialog-apply</command>
              <object-name>control-surface-strength</object-name>
            </binding>
            <binding>
              <command>nasal</command>
              <script>applyChanges();</script>
            </binding>
            <live>true</live>
            <enable><property>/sim/gui/dialogs/force-feedback/control-surface-enable</property></enable>
          </slider>
          <text>
            <label>0.00</label>
            <property>/sim/gui/dialogs/force-feedback/control-surface-strength</property>
            <format>%-0.2f</format>
            <live>true</live>
            <enable><property>/sim/gui/dialogs/force-feedback/control-surface-enable</property></enable>
          </text>
        </group>

        <!-- Axes binding -->
        <group>
          <layout>hbox</layout>

          <!-- X -->
          <group>
            <layout>vbox</layout>
            <text><label>X</label><enable><property>/sim/gui/dialogs/force-feedback/control-surface-enable</property></enable></text>
            <combo>
              <name>control-surface-x</name>
              <property>/sim/gui/dialogs/force-feedback/control-surface-x</property>
              <value>None</value>
              <value>Aileron</value>
              <value>-Aileron</value>
              <value>Elevator</value>
              <value>-Elevator</value>
              <value>Rudder</value>
              <value>-Rudder</value>
              <binding>
                <command>dialog-apply</command>
                <object-name>control-surface-x</object-name>
              </binding>
              <binding>
                <command>nasal</command>
                <script>applyChanges();</script>
              </binding>
              <live>true</live>
              <enable><property>/sim/gui/dialogs/force-feedback/control-surface-enable</property></enable>
            </combo>
          </group>

          <!-- Y -->
          <group>
            <layout>vbox</layout>
            <text><label>Y</label><enable><property>/sim/gui/dialogs/force-feedback/control-surface-enable</property></enable></text>
            <combo>
              <name>control-surface-y</name>
              <property>/sim/gui/dialogs/force-feedback/control-surface-y</property>
              <value>None</value>
              <value>Aileron</value>
              <value>-Aileron</value>
              <value>Elevator</value>
              <value>-Elevator</value> 
              <value>Rudder</value>
              <value>-Rudder</value>
              <binding>
                <command>dialog-apply</command>
                <object-name>control-surface-y</object-name>
              </binding>
              <binding>
                <command>nasal</command>
                <script>applyChanges();</script>
              </binding>
              <live>true</live>
              <enable><property>/sim/gui/dialogs/force-feedback/control-surface-enable</property></enable>
            </combo>
          </group>

          <!-- Z -->
          <group>
            <layout>vbox</layout>
            <text><label>Z</label><enable><property>/sim/gui/dialogs/force-feedback/control-surface-enable</property></enable></text>
            <combo>
              <name>control-surface-z</name>
              <property>/sim/gui/dialogs/force-feedback/control-surface-z</property>
              <value>None</value>
              <value>Aileron</value>
              <value>-Aileron</value>
              <value>Elevator</value>
              <value>-Elevator</value>
              <value>Rudder</value>
              <value>-Rudder</value>
              <binding>
                <command>dialog-apply</command>
                <object-name>control-surface-z</object-name>
              </binding>
              <binding>
                <command>nasal</command>
                <script>applyChanges();</script>
              </binding>
              <live>true</live>
              <enable><property>/sim/gui/dialogs/force-feedback/control-surface-enable</property></enable>
            </combo>
          </group>
        </group>
      </group>


      <!-- <hrule><stretch>1</stretch></hrule> -->

      <!-- Pilot G forces -->
      <group>
        <layout>vbox</layout>

        <!-- Name and strength -->
        <group>
          <layout>hbox</layout>
          <text><label>Pilot G forces</label><enable><property>/sim/gui/dialogs/force-feedback/pilot-g-enable</property></enable></text>
          <hrule><stretch>1</stretch></hrule>
        </group>

        <!-- Slider -->
        <group>
          <layout>hbox</layout>
          <text><label>Strength</label><enable><property>/sim/gui/dialogs/force-feedback/pilot-g-enable</property></enable></text>
          <slider>
            <name>pilot-g-strength</name>
            <!-- <width>100</width> -->
            <property>/sim/gui/dialogs/force-feedback/pilot-g-strength</property>
            <min>0</min>
            <max>5</max>
            <step>0.01</step>
            <binding>
              <command>dialog-apply</command>
              <object-name>pilot-g-strength</object-name>
            </binding>
            <binding>
              <command>nasal</command>
              <script>applyChanges();</script>
            </binding>
            <live>true</live>
            <enable><property>/sim/gui/dialogs/force-feedback/pilot-g-enable</property></enable>
          </slider>
          <text>
            <label>0.00</label>
            <property>/sim/gui/dialogs/force-feedback/pilot-g-strength</property>
            <format>%-0.2f</format>
            <live>true</live>
            <enable><property>/sim/gui/dialogs/force-feedback/pilot-g-enable</property></enable>
          </text>
        </group>

        <!-- Axes binding -->
        <group>
          <layout>hbox</layout>

          <!-- X -->
          <group>
            <layout>vbox</layout>
            <text><label>X</label><enable><property>/sim/gui/dialogs/force-feedback/pilot-g-enable</property></enable></text>
            <combo>
              <name>pilot-g-x</name>
              <property>/sim/gui/dialogs/force-feedback/pilot-g-x</property>
              <value>None</value>
              <value>X</value>
              <value>-X</value>
              <value>Y</value>
              <value>-Y</value>
              <value>Z</value>
              <value>-Z</value>
              <binding>
                <command>dialog-apply</command>
                <object-name>pilot-g-x</object-name>
              </binding>
              <binding>
                <command>nasal</command>
                <script>applyChanges();</script>
              </binding>
              <live>true</live>
              <enable><property>/sim/gui/dialogs/force-feedback/pilot-g-enable</property></enable>
            </combo>
          </group>

          <!-- Y -->
          <group>
            <layout>vbox</layout>
            <text><label>Y</label><enable><property>/sim/gui/dialogs/force-feedback/pilot-g-enable</property></enable></text>
            <combo>
              <name>pilot-g-y</name>
              <property>/sim/gui/dialogs/force-feedback/pilot-g-y</property>
              <value>None</value>
              <value>X</value>
              <value>-X</value>
              <value>Y</value>
              <value>-Y</value>
              <value>Z</value>
              <value>-Z</value>
              <binding>
                <command>dialog-apply</command>
                <object-name>pilot-g-y</object-name>
              </binding>
              <binding>
                <command>nasal</command>
                <script>applyChanges();</script>
              </binding>
              <live>true</live>
              <enable><property>/sim/gui/dialogs/force-feedback/pilot-g-enable</property></enable>
            </combo>
          </group>

          <!-- Z -->
          <group>
            <layout>vbox</layout>
            <text><label>Z</label><enable><property>/sim/gui/dialogs/force-feedback/pilot-g-enable</property></enable></text>
            <combo>
              <name>pilot-g-z</name>
              <property>/sim/gui/dialogs/force-feedback/pilot-g-z</property>
              <value>None</value>
              <value>X</value>
              <value>-X</value>
              <value>Y</value>
              <value>-Y</value>
              <value>Z</value>
              <value>-Z</value>
              <binding>
                <command>dialog-apply</command>
                <object-name>pilot-g-z</object-name>
              </binding>
              <binding>
                <command>nasal</command>
                <script>applyChanges();</script>
              </binding>
              <live>true</live>
              <enable><property>/sim/gui/dialogs/force-feedback/pilot-g-enable</property></enable>
            </combo>
          </group>
        </group>

      </group>


      <!-- <hrule><stretch>1</stretch></hrule> -->


      <!-- Stick shaker -->
      <group>
        <layout>vbox</layout>

        <!-- Name -->
        <group>
          <layout>hbox</layout>
          <text><label>Stick shaker</label><enable><property>/sim/gui/dialogs/force-feedback/stick-shaker-enable</property></enable></text>
          <hrule><stretch>1</stretch></hrule>
        </group>


        <!-- Direction and strength -->
        <group>
          <layout>hbox</layout>

          <!-- Direction -->
          <group>
            <layout>vbox</layout>
            <text><label>Direction</label><enable><property>/sim/gui/dialogs/force-feedback/stick-shaker-enable</property></enable></text>
            <dial>
              <name>stick-shaker-direction</name>
              <property>/sim/gui/dialogs/force-feedback/stick-shaker-direction</property>
              <min>0</min>
              <max>360</max>
              <binding>
                <command>dialog-apply</command>
                <object-name>stick-shaker-direction</object-name>
              </binding>
              <binding>
                <command>nasal</command>
                <script>applyChanges();</script>
              </binding>
              <live>true</live>
              <enable><property>/sim/gui/dialogs/force-feedback/stick-shaker-enable</property></enable>
            </dial>
            <text>
              <label>0.00</label>
              <property>/sim/gui/dialogs/force-feedback/stick-shaker-direction</property>
              <format>%-0.2f</format>
              <live>true</live>
              <enable><property>/sim/gui/dialogs/force-feedback/stick-shaker-enable</property></enable>
            </text>
          </group>

          <!-- Strength -->
          <group>
            <layout>hbox</layout>
            <text><label>Strength</label><enable><property>/sim/gui/dialogs/force-feedback/stick-shaker-enable</property></enable></text>
            <slider>
              <name>stick-shaker-strength</name>
              <!-- <width>100</width> -->
              <property>/sim/gui/dialogs/force-feedback/stick-shaker-strength</property>
              <min>0</min>
              <max>1</max>
              <step>0.01</step>
              <binding>
                <command>dialog-apply</command>
                <object-name>stick-shaker-strength</object-name>
              </binding>
              <binding>
                <command>nasal</command>
                <script>applyChanges();</script>
              </binding>
              <live>true</live>
              <enable><property>/sim/gui/dialogs/force-feedback/stick-shaker-enable</property></enable>
            </slider>
            <text>
              <label>0.00</label>
              <property>/sim/gui/dialogs/force-feedback/stick-shaker-strength</property>
              <format>%-0.2f</format>
              <live>true</live>
              <enable><property>/sim/gui/dialogs/force-feedback/stick-shaker-enable</property></enable>
            </text>
          </group>
        </group>
      </group>


    </group>

    <vrule><stretch>1</stretch></vrule>

    <!-- Right side -->

    <!-- Ground rumble effect -->
    <group>
      <layout>vbox</layout>

      <!-- Name -->
      <group>
        <layout>hbox</layout>
        <text><label>Ground rumble</label><enable><property>/sim/gui/dialogs/force-feedback/ground-rumble-enable</property></enable></text>
        <hrule><stretch>1</stretch></hrule>
      </group>

      <combo>
        <name>ground-rumble-mode</name>
        <!-- <width>400</width> -->
        <property>/sim/gui/dialogs/force-feedback/ground-rumble-mode</property>
        <halign>fill</halign>
        <stretch>1</stretch>
        <value>Normal</value>
        <value>Alternate</value>
        <binding>
          <command>dialog-apply</command>
          <object-name>ground-rumble-mode</object-name>
        </binding>
        <binding>
          <command>nasal</command>
          <script>applyChanges();</script>
        </binding>
      </combo>


      <!-- Slider -->
      <group>
        <layout>hbox</layout>
        <text><label>Strength</label><enable><property>/sim/gui/dialogs/force-feedback/ground-rumble-enable</property></enable></text>
        <slider>
          <name>ground-rumble-strength</name>
          <!-- <width>100</width> -->
          <property>/sim/gui/dialogs/force-feedback/ground-rumble-strength</property>
          <min>0</min>
          <max>5</max>
          <step>0.01</step>
          <binding>
            <command>dialog-apply</command>
            <object-name>ground-rumble-strength</object-name>
          </binding>
          <binding>
            <command>nasal</command>
            <script>applyChanges();</script>
          </binding>
          <live>true</live>
          <enable><property>/sim/gui/dialogs/force-feedback/ground-rumble-enable</property></enable>
        </slider>
        <text>
          <label>0.00</label>
          <property>/sim/gui/dialogs/force-feedback/ground-rumble-strength</property>
          <format>%-0.2f</format>
          <live>true</live>
          <enable><property>/sim/gui/dialogs/force-feedback/ground-rumble-enable</property></enable>
        </text>
      </group>
    </group>

  </group>


  <hrule><stretch>1</stretch></hrule>


  <group>
    <layout>hbox</layout>

    <empty><stretch>1</stretch></empty>

    <!-- Apply button -->
    <button>
      <legend>Apply</legend>
      <binding>
        <command>nasal</command>
        <script>reconfigure();</script>
      </binding>
    </button>

    <!-- Test button -->
    <button>
      <legend>Test</legend>
      <property>/haptic/test-mode</property>
      <live>true</live>
      <binding>
        <command>property-toggle</command>
        <property>/haptic/test-mode</property>
      </binding>
    </button>

    <!-- Close button -->
    <button>
      <legend>Close</legend>
      <binding>
        <command>dialog-close</command>
      </binding>
    </button>
  </group>


  <!-- Nasal scripts to load settings -->
  <nasal>
    <open><![CDATA[
      # Helper functions

      # Find a widget with given name
      var find_widget = func(node, name) {
        if ((var n = node.getNode("name")) != nil and n.getValue() == name)
          return node;

        foreach (var n; node.getChildren()) {
          var ret = enable_widgets(n, name, enable);
          if(ret != nil) return ret; # Propagate upwards.
        }
        return nil;
      };

      # Stick and pilot axis mapping
      var stick_axis = { None:-1, Aileron:0, Elevator:1, Rudder:2 };
      var pilot_axis = { None:-1, X:0, Y:1, Z:2 };

      var getAxisNumber = func(node, values) {
        var selected = getprop(node);
        foreach (var key; keys(values)) {
          if(selected == key) return values[key];
        }
        return -1;
      };

      var getAxisName = func(selected, values) {
        foreach (var key; keys(values)) {
          if(selected == values[key]) return key;
        }
        return "None";
      };

      var applyChanges = func {
        var hapticNode = props.globals.getNode("/haptic", 1);
        if(hapticNode == nil) return;

        # Loop through devices, and find one with correct name
        var devices = hapticNode.getChildren("device");
        forindex(var i; devices)
        {
          var name = devices[i].getNode("name").getValue();
          if(name == getprop("/sim/gui/dialogs/force-feedback/selected-device")) {
            # Found the device number, apply all values there!
            setprop("/haptic/device[" ~ i ~ "]/autocenter", getprop("/sim/gui/dialogs/force-feedback/autocenter"));
            setprop("/haptic/device[" ~ i ~ "]/gain", getprop("/sim/gui/dialogs/force-feedback/gain"));
            setprop("/haptic/device[" ~ i ~ "]/pilot/gain", getprop("/sim/gui/dialogs/force-feedback/pilot-g-strength"));
            setprop("/haptic/device[" ~ i ~ "]/pilot/x", getAxisNumber("/sim/gui/dialogs/force-feedback/pilot-g-x", pilot_axis));
            setprop("/haptic/device[" ~ i ~ "]/pilot/y", getAxisNumber("/sim/gui/dialogs/force-feedback/pilot-g-y", pilot_axis));
            setprop("/haptic/device[" ~ i ~ "]/pilot/z", getAxisNumber("/sim/gui/dialogs/force-feedback/pilot-g-z", pilot_axis));
            #setprop("/haptic/device[" ~ i ~ "]/pilot/x", getprop("/sim/gui/dialogs/force-feedback/pilot-g-x"));
            #setprop("/haptic/device[" ~ i ~ "]/pilot/y", getprop("/sim/gui/dialogs/force-feedback/pilot-g-y"));
            #setprop("/haptic/device[" ~ i ~ "]/pilot/z", getprop("/sim/gui/dialogs/force-feedback/pilot-g-z"));
            setprop("/haptic/device[" ~ i ~ "]/stick-force/gain", getprop("/sim/gui/dialogs/force-feedback/control-surface-strength"));
            setprop("/haptic/device[" ~ i ~ "]/stick-force/x", getAxisNumber("/sim/gui/dialogs/force-feedback/control-surface-x", stick_axis));
            setprop("/haptic/device[" ~ i ~ "]/stick-force/y", getAxisNumber("/sim/gui/dialogs/force-feedback/control-surface-y", stick_axis));
            setprop("/haptic/device[" ~ i ~ "]/stick-force/z", getAxisNumber("/sim/gui/dialogs/force-feedback/control-surface-z", stick_axis));
            #setprop("/haptic/device[" ~ i ~ "]/stick-force/x", getprop("/sim/gui/dialogs/force-feedback/control-surface-x"));
            #setprop("/haptic/device[" ~ i ~ "]/stick-force/y", getprop("/sim/gui/dialogs/force-feedback/control-surface-y"));
            #setprop("/haptic/device[" ~ i ~ "]/stick-force/z", getprop("/sim/gui/dialogs/force-feedback/control-surface-z"));
            setprop("/haptic/device[" ~ i ~ "]/stick-shaker/gain", getprop("/sim/gui/dialogs/force-feedback/stick-shaker-strength"));
            setprop("/haptic/device[" ~ i ~ "]/stick-shaker/direction", getprop("/sim/gui/dialogs/force-feedback/stick-shaker-direction"));
            setprop("/haptic/device[" ~ i ~ "]/stick-shaker/period", getprop("/sim/gui/dialogs/force-feedback/stick-shaker-period"));
            setprop("/haptic/device[" ~ i ~ "]/ground-rumble/gain", getprop("/sim/gui/dialogs/force-feedback/ground-rumble-strength"));
            # setprop("/haptic/device[" ~ i ~ "]/", getprop("/sim/gui/dialogs/force-feedback/"));
            # setprop("/haptic/device[" ~ i ~ "]/", getprop("/sim/gui/dialogs/force-feedback/"));

            var mode = getprop("/sim/gui/dialogs/force-feedback/control-surface-mode");
            if(mode == "Normal")
              setprop("/haptic/device[" ~ i ~ "]/stick-force/mode", 0);
            else
              setprop("/haptic/device[" ~ i ~ "]/stick-force/mode", 1);

            var mode = getprop("/sim/gui/dialogs/force-feedback/ground-rumble-mode");
            if(mode == "Normal")
              setprop("/haptic/device[" ~ i ~ "]/ground-rumble/mode", 0);
            else
              setprop("/haptic/device[" ~ i ~ "]/ground-rumble/mode", 1);

            gui.dialog_update("force-feedback");
            return;
          }
        }
      };

      var reconfigure = func {
        setprop("/haptic/reconfigure", 1);
      };

      # Fill dialog params with selected device
      var fillParams = func(dev) {

        # TODO: Should probably use gui.enable_widget(...) instead of enable-properties...

        # AUTOCENTER

        effect = getprop("/haptic/device[" ~ dev ~ "]/autocenter");
        if(effect == nil) effect = 0;
        setprop("/sim/gui/dialogs/force-feedback/autocenter", effect);

        var effect = getprop("/haptic/device[" ~ dev ~ "]/autocenter-supported");
        if((effect == nil) or (effect == 0)) setprop("/sim/gui/dialogs/force-feedback/autocenter-enable", "false");
        else setprop("/sim/gui/dialogs/force-feedback/autocenter-enable", "true");


        # GAIN

        effect = getprop("/haptic/device[" ~ dev ~ "]/gain");
        if(effect == nil) effect = 1.0;
        setprop("/sim/gui/dialogs/force-feedback/gain", effect);

        effect = getprop("/haptic/device[" ~ dev ~ "]/gain-supported");
        if((effect == nil) or (effect == 0)) setprop("/sim/gui/dialogs/force-feedback/gain-enable", "false");
        else setprop("/sim/gui/dialogs/force-feedback/gain-enable", "true");


        # PILOT G FORCES

        # We must enable the widgets for this to work...
        setprop("/sim/gui/dialogs/force-feedback/pilot-g-enable", "true");

        # Then change values
        effect = getprop("/haptic/device[" ~ dev ~ "]/pilot/x");
        if(effect == nil) setprop("/sim/gui/dialogs/force-feedback/pilot-g-x", "-Y");
        else setprop("/sim/gui/dialogs/force-feedback/pilot-g-x", getAxisName(effect, pilot_axis));

        if(getprop("/haptic/device[" ~ dev ~ "]/axes") > 1) {
          effect = getprop("/haptic/device[" ~ dev ~ "]/pilot/y");
          if(effect == nil) setprop("/sim/gui/dialogs/force-feedback/pilot-g-y", "X");
          else setprop("/sim/gui/dialogs/force-feedback/pilot-g-y", getAxisName(effect, pilot_axis));
        } else setprop("/sim/gui/dialogs/force-feedback/pilot-g-y", "None");

        if(getprop("/haptic/device[" ~ dev ~ "]/axes") > 2) {
          effect = getprop("/haptic/device[" ~ dev ~ "]/pilot/z");
          if(effect == nil) setprop("/sim/gui/dialogs/force-feedback/pilot-g-z", "Z");
          else setprop("/sim/gui/dialogs/force-feedback/pilot-g-z", getAxisName(effect, pilot_axis));
        } else setprop("/sim/gui/dialogs/force-feedback/pilot-g-z", "None");


        effect = getprop("/haptic/device[" ~ dev ~ "]/pilot/gain");
        if(effect == nil) effect = 0;
        setprop("/sim/gui/dialogs/force-feedback/pilot-g-strength", effect);

        effect = getprop("/haptic/device[" ~ dev ~ "]/pilot/supported");
        if((effect == nil) or (effect == 0)) setprop("/sim/gui/dialogs/force-feedback/pilot-g-enable", "false");
        else setprop("/sim/gui/dialogs/force-feedback/pilot-g-enable", "true");


        # CONTROL SURFACE FORCES
        setprop("/sim/gui/dialogs/force-feedback/control-surface-enable", "true");

        effect = getprop("/haptic/device[" ~ dev ~ "]/stick-force/mode");
        if(effect == nil) setprop("/sim/gui/dialogs/force-feedback/control-surface-mode", "Normal");
        else {
          if (effect == 0) setprop("/sim/gui/dialogs/force-feedback/control-surface-mode", "Normal");
          if (effect == 1) setprop("/sim/gui/dialogs/force-feedback/control-surface-mode", "Alternate");
        }

        effect = getprop("/haptic/device[" ~ dev ~ "]/stick-force/gain");
        if(effect == nil) effect = 0;
        setprop("/sim/gui/dialogs/force-feedback/control-surface-strength", effect);

        # Axis bindings
        effect = getprop("/haptic/device[" ~ dev ~ "]/stick-force/x");
        if(effect == nil) setprop("/sim/gui/dialogs/force-feedback/control-surface-x", "-Aileron");
        else setprop("/sim/gui/dialogs/force-feedback/control-surface-x", getAxisName(effect, stick_axis));

        if(getprop("/haptic/device[" ~ dev ~ "]/axes") > 1) {
          effect = getprop("/haptic/device[" ~ dev ~ "]/stick-force/y");
          if(effect == nil) setprop("/sim/gui/dialogs/force-feedback/control-surface-y", "-Elevator");
          else setprop("/sim/gui/dialogs/force-feedback/control-surface-y", getAxisName(effect, stick_axis));
        } else setprop("/sim/gui/dialogs/force-feedback/control-surface-y", "None");

        if(getprop("/haptic/device[" ~ dev ~ "]/axes") > 2) {
          effect = getprop("/haptic/device[" ~ dev ~ "]/stick-force/z");
          if(effect == nil) setprop("/sim/gui/dialogs/force-feedback/control-surface-z", "Rudder");
          else setprop("/sim/gui/dialogs/force-feedback/control-surface-z", getAxisName(effect, stick_axis));
        } else setprop("/sim/gui/dialogs/force-feedback/control-surface-z", "None");

        effect = getprop("/haptic/device[" ~ dev ~ "]/stick-force/supported");
        if((effect == nil) or (effect == 0)) setprop("/sim/gui/dialogs/force-feedback/control-surface-enable", "false");
        else setprop("/sim/gui/dialogs/force-feedback/control-surface-enable", "true");


        # STICK SHAKER
        setprop("/sim/gui/dialogs/force-feedback/stick-shaker-enable", "true");
        effect = getprop("/haptic/device[" ~ dev ~ "]/stick-shaker/gain");
        if(effect == nil) effect = 0;
        setprop("/sim/gui/dialogs/force-feedback/stick-shaker-strength", effect);

        effect = getprop("/haptic/device[" ~ dev ~ "]/stick-shaker/period");
        if(effect == nil) effect = 0;
        setprop("/sim/gui/dialogs/force-feedback/stick-shaker-period", effect);

        effect = getprop("/haptic/device[" ~ dev ~ "]/stick-shaker/direction");
        if(effect == nil) effect = 90;
        setprop("/sim/gui/dialogs/force-feedback/stick-shaker-direction", effect);

        effect = getprop("/haptic/device[" ~ dev ~ "]/stick-shaker/supported");
        if(effect == nil) setprop("/sim/gui/dialogs/force-feedback/stick-shaker-enable", "false");
        else setprop("/sim/gui/dialogs/force-feedback/stick-shaker-enable", "true");


        # GROUND RUMBLE
        effect = getprop("/haptic/device[" ~ dev ~ "]/ground-rumble/gain");
        if(effect == nil) effect = 0;
        setprop("/sim/gui/dialogs/force-feedback/ground-rumble-strength", effect);

        effect = getprop("/haptic/device[" ~ dev ~ "]/ground-rumble/mode");
        if(effect == nil) setprop("/sim/gui/dialogs/force-feedback/ground-rumble-mode", "Normal");
        else {
          if (effect == 0) setprop("/sim/gui/dialogs/force-feedback/ground-rumble-mode", "Normal");
          if (effect == 1) setprop("/sim/gui/dialogs/force-feedback/ground-rumble-mode", "Alternate");
        }

        effect = getprop("/haptic/device[" ~ dev ~ "]/ground-rumble/supported");
        if(effect == nil) setprop("/sim/gui/dialogs/force-feedback/ground-rumble-enable", "false");
        else setprop("/sim/gui/dialogs/force-feedback/ground-rumble-enable", "true");


        # TODO: Set combo box default/set values

        # Disable non existing axis
        effect = getprop("/haptic/device[" ~ dev ~ "]/axes");
        if(effect != nil) {
          if(effect < 3) {  # Disable Z axis
            gui.enable_widgets(cmdarg(), "control-surface-z", 0);  # TODO: Looks ugly...
            gui.enable_widgets(cmdarg(), "pilot-g-z", 0);
          }
          if(effect < 2) { # Disable also Y axis
            gui.enable_widgets(cmdarg(), "control-surface-y", 0);
            gui.enable_widgets(cmdarg(), "pilot-g-y", 0);
          }
          if(effect < 1) { # 0 Axis... rumble or something
            gui.enable_widgets(cmdarg(), "control-surface-x", 0);
            gui.enable_widgets(cmdarg(), "pilot-g-x", 0);
          }
        }

        gui.dialog_update("force-feedback");
      };


      var changeDevice = func {
        var hapticNode = props.globals.getNode("/haptic", 1);
        if(hapticNode == nil) return;

        # Loop through devices, and find one with correct name
        var devices = hapticNode.getChildren("device");
        forindex(var i; devices)
        {
          var name = devices[i].getNode("name").getValue();
          if(name == getprop("/sim/gui/dialogs/force-feedback/selected-device")) {
            # Fill the parameters for this device
            fillParams(i);
            return;
          }
        }
        # Not found, some kind of error! Let it be as is.
      };


      # Find the combo box for devices
      var devicesCombo = cmdarg().getNode("group[1]/combo");

      var hapticNode = props.globals.getNode("/haptic", 1);
      if(hapticNode == nil) {
        die("No haptic devices found, is fg-haptic running?");
      }

      var devices = hapticNode.getChildren("device");

      # Remove test variables and fill with real ones
      devicesCombo.removeChildren("value");
      forindex(var i; devices)
      {
        var name = devices[i].getNode("name");
        if(name == nil) {
          # Might be a dummy item from generic io
        } else {
          name = name.getValue();
          devicesCombo.getChild("value", i, 1).setValue(name);

          # Select 1st device by default
          if(i == 0) {
            setprop("/sim/gui/dialogs/force-feedback/selected-device", name);
          }
        }
      }

      # Fill the parameters for 1st device
      fillParams(0);

    ]]></open>


    <close><![CDATA[

    ]]></close>
  </nasal>

</PropertyList>
